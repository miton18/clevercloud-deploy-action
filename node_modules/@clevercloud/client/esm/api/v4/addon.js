import { pickNonNull } from '../../pick-non-null.js';

/**
 * GET /addon-providers/config-provider/addons/{configurationProviderId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {Object} body
 */
export function getConfigProvider(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/addon-providers/config-provider/addons/${params.configurationProviderId}`,
    headers: { Accept: 'application/json', 'Content-Type': '*/*' },
    // no query params
    body,
  });
}

/**
 * GET /addon-providers/config-provider/addons/{configurationProviderId}/env
 * @param {Object} params
 * @param {String} params.undefined
 * @param {Object} body
 */
export function getConfigProviderEnv(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/addon-providers/config-provider/addons/${params.configurationProviderId}/env`,
    headers: { Accept: 'application/json', 'Content-Type': '*/*' },
    // no query params
    body,
  });
}

/**
 * PUT /addon-providers/config-provider/addons/{configurationProviderId}/env
 * @param {Object} params
 * @param {String} params.undefined
 * @param {Object} body
 */
export function updateConfigProviderEnv(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'put',
    url: `/v4/addon-providers/config-provider/addons/${params.configurationProviderId}/env`,
    headers: { Accept: 'application/json', 'Content-Type': 'application/json' },
    // no query params
    body,
  });
}
