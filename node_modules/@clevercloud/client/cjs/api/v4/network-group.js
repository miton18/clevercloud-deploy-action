"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.listNetworkGroups = listNetworkGroups;
exports.createNetworkGroup = createNetworkGroup;
exports.deleteNetworkGroup = deleteNetworkGroup;
exports.getNetworkGroup = getNetworkGroup;
exports.createNetworkGroupExternalPeer = createNetworkGroupExternalPeer;
exports.deleteNetworkGroupExternalPeer = deleteNetworkGroupExternalPeer;
exports.listNetworkGroupMembers = listNetworkGroupMembers;
exports.createNetworkGroupMember = createNetworkGroupMember;
exports.deleteNetworkGroupMember = deleteNetworkGroupMember;
exports.getNetworkGroupMember = getNetworkGroupMember;
exports.listNetworkGroupPeers = listNetworkGroupPeers;
exports.deleteNetworkGroupPeer = deleteNetworkGroupPeer;
exports.getNetworkGroupPeer = getNetworkGroupPeer;
exports.getNetworkGroupWireGuardConfiguration = getNetworkGroupWireGuardConfiguration;
exports.getNetworkGroupWireGuardConfigurationStream = getNetworkGroupWireGuardConfigurationStream;
exports.getNetworkGroupStream = getNetworkGroupStream;

var _pickNonNull = require("../../pick-non-null.js");

/**
 * GET /networkgroups/organisations/{ownerId}/networkgroups
 * @param {Object} params
 * @param {String} params.undefined
 * @param {Object} body
 */
function listNetworkGroups(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups`,
    headers: {
      Accept: 'application/json',
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * POST /networkgroups/organisations/{ownerId}/networkgroups
 * @param {Object} params
 * @param {String} params.undefined
 * @param {Object} body
 */


function createNetworkGroup(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'post',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups`,
    headers: {
      'Content-Type': 'application/json'
    },
    // no query params
    body
  });
}
/**
 * DELETE /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function deleteNetworkGroup(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'delete',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}`,
    headers: {
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * GET /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function getNetworkGroup(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}`,
    headers: {
      Accept: 'application/json',
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * POST /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function createNetworkGroupExternalPeer(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'post',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/external-peers`,
    headers: {
      Accept: 'application/json',
      'Content-Type': 'application/json'
    },
    // no query params
    body
  });
}
/**
 * DELETE /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/external-peers/{peerId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function deleteNetworkGroupExternalPeer(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'delete',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/external-peers/${params.peerId}`,
    headers: {
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * GET /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function listNetworkGroupMembers(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/members`,
    headers: {
      Accept: 'application/json',
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * POST /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function createNetworkGroupMember(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'post',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/members`,
    headers: {
      'Content-Type': 'application/json'
    },
    // no query params
    body
  });
}
/**
 * DELETE /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function deleteNetworkGroupMember(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'delete',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/members/${params.memberId}`,
    headers: {
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * GET /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/members/{memberId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function getNetworkGroupMember(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/members/${params.memberId}`,
    headers: {
      Accept: 'application/json',
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * GET /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function listNetworkGroupPeers(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/peers`,
    headers: {
      Accept: 'application/json',
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * DELETE /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function deleteNetworkGroupPeer(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'delete',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/peers/${params.peerId}`,
    headers: {
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * GET /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function getNetworkGroupPeer(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/peers/${params.peerId}`,
    headers: {
      Accept: 'application/json',
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * GET /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function getNetworkGroupWireGuardConfiguration(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/peers/${params.peerId}/wireguard/configuration`,
    headers: {
      Accept: 'application/json',
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * GET /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/peers/{peerId}/wireguard/configuration/stream
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function getNetworkGroupWireGuardConfigurationStream(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/peers/${params.peerId}/wireguard/configuration/stream`,
    headers: {
      Accept: 'text/event-stream',
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}
/**
 * GET /networkgroups/organisations/{ownerId}/networkgroups/{networkGroupId}/stream
 * @param {Object} params
 * @param {String} params.undefined
 * @param {String} params.undefined
 * @param {Object} body
 */


function getNetworkGroupStream(params, body) {
  // no multipath for /self or /organisations/{id}
  return Promise.resolve({
    method: 'get',
    url: `/v4/networkgroups/organisations/${params.ownerId}/networkgroups/${params.networkGroupId}/stream`,
    headers: {
      Accept: 'text/event-stream',
      'Content-Type': '*/*'
    },
    // no query params
    body
  });
}